INSTALL
=======

eZ Publish
----------
1. Enable extension
2. Renegerate autoloads
3. Clear cache
4. edit the configuration in the extension mugo_varnish
   mugo_varnish.ini -- see inline doc for more details
5. This extension requires the functionality developed in following pull request:
https://github.com/ezsystems/ezpublish/pull/99#issuecomment-1780743

Varnish
-------
In your varnish config file

1. add ACLs (root context - Varnish 2.1 and 3.0 syntax)

acl purge
{
	"127.0.0.1";
}

2. Add following varnish config to the top of the sub vcl_recv routine

Varnish 3.0 syntax:

        if( req.request == "PURGE" )
        {
                # Limit access for security reasons
                if( !client.ip ~ purge )
                {
                        error 405 "Not allowed.";
                }

                # URL purges -- one for the URL and one for all view parameter variations
                if( req.http.X-Purge-Url )
                {
                        set req.http.X-Purge-Url1 = "^" + req.http.X-Purge-Url + "$";
                        set req.http.X-Purge-Url2 = "^" + req.http.X-Purge-Url + "/\(";

                        ban( "obj.http.x-url ~ " + req.http.X-Purge-Url1 );
                        ban( "obj.http.x-url ~ " + req.http.X-Purge-Url2 );
                        error 200 "URL Purged.";
                }

                # Any regular expressions here
                if( req.http.X-Purge-Reg )
                {
                        ban( "obj.http.x-url ~ " + req.http.X-Purge-Reg );
                        error 200 "Regular Expression Purged.";
                }

                error 405 "Missing X-Purge-Url or X-Purge-Reg header.";
        }
        
Varnish 2.1 syntax:

	#
	# PURGE requests
	#
	if( req.request == "PURGE" )
	{
		# Limit access for security reasons
		if( !client.ip ~ purge )
		{
			error 405 "Not allowed.";
		}
		
		# URL purges -- one for the URL and one for all view parameter variations
		if( req.http.X-Purge-Url )
		{
			set req.http.X-Purge-Url1 = "^" req.http.X-Purge-Url "$";
			set req.http.X-Purge-Url2 = "^" req.http.X-Purge-Url "/\\(";
			
			purge( "req.url ~ " req.http.X-Purge-Url1 );
			purge( "req.url ~ " req.http.X-Purge-Url2 );
			error 200 "URL Purged.";
		}

		# Any regular expressions here
		if( req.http.X-Purge-Reg )
		{
			purge( "req.url ~ " req.http.X-Purge-Reg );
			error 200 "Regular Expression Purged.";
		}

		error 405 "Missing X-Purge-Url or X-Purge-Reg header.";
	}

3. You need to store the URL on the cache object - ban lurker friendly.
   Therefore add folling in the sub vlc_fetch:

     # add URL to object
     set beresp.http.x-url = req.url;
     
4. Optional debug config (Varnish 2.1 and 3.0 syntax)

sub vcl_deliver {

  set resp.http.X-Served-By = server.hostname;
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";	
    set resp.http.X-Cache-Hits = obj.hits;
  } else {
    set resp.http.X-Cache = "MISS";	
  }

  return( deliver );
}
